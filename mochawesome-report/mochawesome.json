{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-06T01:54:54.638Z",
    "end": "2025-09-06T01:54:55.836Z",
    "duration": 1198,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "79b3b5ad-fc51-4ed7-a707-554664b8f2c8",
      "title": "",
      "fullFile": "C:\\Users\\ACER\\Documents\\Project bootcamp\\QA Engineer\\Test_API\\ApiTest.js",
      "file": "\\Test_API\\ApiTest.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "28d17096-914b-4aef-b68f-f92384640edd",
          "title": "Tugas API Automation: reqres.in",
          "fullFile": "C:\\Users\\ACER\\Documents\\Project bootcamp\\QA Engineer\\Test_API\\ApiTest.js",
          "file": "\\Test_API\\ApiTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "(GET) data user",
              "fullTitle": "Tugas API Automation: reqres.in (GET) data user",
              "timedOut": false,
              "duration": 315,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await fetch(`${BASE_URL}/users/2`);\nconst data = await response.json(); \n\nconsole.log('GET Response:', data);\n// Pengecekan (Assertion)\nassert.strictEqual(response.status, 200, \"Gagal: Status code GET harus 200\"); // Memastikan status code adalah 20\nassert.strictEqual(data.data.id, 2, \"Gagal: ID user harus 2\"); // Memastikan ID user yang didapat adalah 2",
              "err": {},
              "uuid": "fffa6096-8c0f-4774-9dbc-ae8f49341a30",
              "parentUUID": "28d17096-914b-4aef-b68f-f92384640edd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "(POST) Created data user baru",
              "fullTitle": "Tugas API Automation: reqres.in (POST) Created data user baru",
              "timedOut": false,
              "duration": 412,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = { name: \"Deny Setyawan\", job: \"Karyawan Swasta\" };\nconst response = await fetch(`${BASE_URL}/users`, {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        // Poin Kunci: Header otentikasi yang benar sesuai dokumentasi reqres.in\n        'x-api-key': AUTH_TOKEN\n    },\n    body: JSON.stringify(payload)\n});\nconst data = await response.json();\nconsole.log('POST Response:', data);\n\nassert.strictEqual(response.status, 201, \"Gagal: Status code POST harus 201\"); // Memastikan status code adalah 201\nassert.strictEqual(data.name, payload.name, \"Gagal: Nama user yang dibuat tidak sesuai\"); // Memastikan nama user yang dibuat sesuai dengan payload",
              "err": {},
              "uuid": "74b9129d-e171-4a58-9906-cc1d1207d9db",
              "parentUUID": "28d17096-914b-4aef-b68f-f92384640edd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "(PATCH) data user (update sebagian data)",
              "fullTitle": "Tugas API Automation: reqres.in (PATCH) data user (update sebagian data)",
              "timedOut": false,
              "duration": 230,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = { job: \"Karyawan Swasta\" };\n\nconst response = await fetch(`${BASE_URL}/users/2`, {\n    method: 'PATCH',\n    headers: {\n        'Content-Type': 'application/json',\n        'x-api-key': AUTH_TOKEN // Header yang sama untuk otentikasi\n    },\n    body: JSON.stringify(payload)\n});\nconst data = await response.json();\nconsole.log('PATCH Response:', data);\nassert.strictEqual(response.status, 200, \"Gagal: Status code PATCH harus 200\"); // Memastikan status code adalah 200\nassert.strictEqual(data.job, payload.job, \"Gagal: Pekerjaan user tidak ter-update\"); // Memastikan pekerjaan user yang diupdate sesuai dengan payload",
              "err": {},
              "uuid": "5595c0fb-62d2-4789-bd0a-956ba9e06b04",
              "parentUUID": "28d17096-914b-4aef-b68f-f92384640edd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "(DELETE) data user ",
              "fullTitle": "Tugas API Automation: reqres.in (DELETE) data user ",
              "timedOut": false,
              "duration": 235,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await fetch(`${BASE_URL}/users/2`, {\n            method: 'DELETE',\n            headers: {\n                'x-api-key': AUTH_TOKEN // Header yang sama untuk otentikasi\n            }\n        });\n        \n        console.log('DELETE Response Status:', response.status);\n        assert.strictEqual(response.status, 204, \"Gagal: Status code DELETE harus 204\"); // Memastikan status code adalah 204 (No Content)",
              "err": {},
              "uuid": "12bf7134-fe73-4371-bbba-697923c8eb73",
              "parentUUID": "28d17096-914b-4aef-b68f-f92384640edd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fffa6096-8c0f-4774-9dbc-ae8f49341a30",
            "74b9129d-e171-4a58-9906-cc1d1207d9db",
            "5595c0fb-62d2-4789-bd0a-956ba9e06b04",
            "12bf7134-fe73-4371-bbba-697923c8eb73"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1192,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 60000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}